Index: src/video/dedicated_v.cpp
===================================================================
--- src/video/dedicated_v.cpp	(revision 11515)
+++ src/video/dedicated_v.cpp	(working copy)
@@ -10,6 +10,7 @@
 #include "../gfx.h"
 #include "../network/network.h"
 #include "../window.h"
+#include "../api.h"
 #include "../console.h"
 #include "../variables.h"
 #include "../genworld.h"
@@ -216,6 +217,12 @@
 
 	if (_exit_game) return;
 
+    if (_binary_api) {
+        // uh, don't try and run this on win32
+        API_ReadReady();
+        return;
+    }
+
 #if defined(UNIX) || defined(__OS2__) || defined(PSP)
 	if (fgets(input_line, lengthof(input_line), stdin) == NULL) return;
 #else
Index: src/api.h
===================================================================
--- src/api.h	(revision 0)
+++ src/api.h	(revision 0)
@@ -0,0 +1,18 @@
+
+#ifndef API_H
+#define API_H
+
+VARDEF bool _binary_api;
+
+void API_Init();
+
+// there is data on stdin available for reading
+void API_ReadReady();
+
+void API_ConsoleMessageCmd (const char *msg);
+void API_ConsoleWarningCmd (const char *msg);
+void API_ConsoleErrorCmd (const char *msg);
+void API_ConsoleDebugCmd (const char *category, const char *msg);
+void API_NetworkEventCmd (int action, bool self_send, const char *name, const char *buf);
+
+#endif /* API_H */
Index: src/console.cpp
===================================================================
--- src/console.cpp	(revision 11515)
+++ src/console.cpp	(working copy)
@@ -15,6 +15,7 @@
 #include <stdarg.h>
 #include <string.h>
 #include "console.h"
+#include "api.h"
 #include "helpers.hpp"
 #include "network/network.h"
 #include "network/network_data.h"
@@ -373,6 +374,12 @@
 void IConsolePrint(uint16 color_code, const char *string)
 {
 	char *str;
+    
+    if (_binary_api) {
+        API_ConsoleMessageCmd(string);
+        return;
+    }
+
 #ifdef ENABLE_NETWORK
 	if (_redirect_console_to_client != 0) {
 		/* Redirect the string to the client */
@@ -436,6 +443,11 @@
  */
 void IConsoleDebug(const char *dbg, const char *string)
 {
+    if (_binary_api) {
+        API_ConsoleDebugCmd(dbg, string);
+        return;
+    }
+        
 	if (_stdlib_developer > 1)
 		IConsolePrintF(_icolour_dbg, "dbg: [%s] %s", dbg, string);
 }
@@ -447,6 +459,11 @@
  */
 void IConsoleWarning(const char *string)
 {
+    if (_binary_api) {
+        API_ConsoleWarningCmd(string);
+        return;
+    }
+
 	if (_stdlib_developer > 0)
 		IConsolePrintF(_icolour_warn, "WARNING: %s", string);
 }
@@ -457,6 +474,11 @@
  */
 void IConsoleError(const char *string)
 {
+    if (_binary_api) {
+        API_ConsoleErrorCmd(string);
+        return;
+    }
+
 	IConsolePrintF(_icolour_err, "ERROR: %s", string);
 }
 
Index: src/network/network.cpp
===================================================================
--- src/network/network.cpp	(revision 11515)
+++ src/network/network.cpp	(working copy)
@@ -26,6 +26,7 @@
 #include "core/tcp.h"
 #include "core/core.h"
 #include "network_gui.h"
+#include "../api.h"
 #include "../console.h" /* IConsoleCmdExec */
 #include <stdarg.h> /* va_list */
 #include "../md5.h"
@@ -136,6 +137,12 @@
 	va_start(va, str);
 	vsnprintf(buf, lengthof(buf), str, va);
 	va_end(va);
+    
+    // redirect to binary API if needed
+    if (_binary_api) {
+        API_NetworkEventCmd(action, self_send, name, buf);
+        return;
+    }
 
 	switch (action) {
 		case NETWORK_ACTION_SERVER_MESSAGE:
Index: src/api.cpp
===================================================================
--- src/api.cpp	(revision 0)
+++ src/api.cpp	(revision 0)
@@ -0,0 +1,259 @@
+/*
+ * This provides a binary API on stdin/out instead of the human-readable console
+ */
+
+#include <stdio.h>
+#include <string.h>
+
+#include "stdafx.h"
+#include "openttd.h"
+#include "api.h"
+#include "console.h"
+#include "player.h"
+#include "network/network.h"
+#include "string.h"
+
+// has to be after openttd.h, it seems
+#include <arpa/inet.h>
+
+enum API_SendCommands {
+    CMD_OUT_NULL,
+
+    CMD_OUT_CONSOLE,
+    CMD_OUT_WARNING,
+    CMD_OUT_ERROR,
+    CMD_OUT_DEBUG,
+
+    CMD_OUT_NETWORK_EVENT,
+    CMD_OUT_PLAYERS_REPLY
+};
+
+enum API_RecvCommands {
+    CMD_IN_NULL,
+
+    CMD_IN_CONSOLE_EXEC,
+    CMD_IN_PLAYERS
+};
+
+void API_Init() {
+    
+}
+
+/* write... */
+void API_Write (const char byte) {
+    putc(byte, stdout);
+}
+
+void API_WriteLen (const char *buf, size_t size) {
+    fwrite(buf, size, 1, stdout);
+}
+
+void API_WriteFlush () {
+    fflush(stdout);
+};
+
+void API_WriteCommand (const char command, const unsigned char num_args) {
+    API_Write(command);
+    API_Write(num_args);
+}
+
+void API_WriteBoolean (bool boolean) {
+    API_Write('x');
+    API_Write(boolean);
+}
+
+void API_WriteByte (const char byte) {
+    API_Write('B');
+    API_Write(byte);
+}
+
+void API_WriteShort (const short i) {
+    API_Write('H');
+
+    uint16_t n_i = htons(i);
+
+    fwrite(&n_i, sizeof(n_i), 1, stdout);
+}
+
+void API_WriteLong (int64 i) {
+    API_Write('Q');
+
+	API_Write(GB(i, 56, 8));
+	API_Write(GB(i, 48, 8));
+	API_Write(GB(i, 40, 8));
+    API_Write(GB(i, 32, 8));
+	API_Write(GB(i, 24, 8));
+	API_Write(GB(i, 16, 8));
+	API_Write(GB(i,  8, 8));
+    API_Write(GB(i,  0, 8));
+}
+
+void API_WriteBuffer (const char *buf, size_t size) {
+    API_Write('S');
+    API_WriteByte(size);
+    API_WriteLen(buf, size);
+}
+
+void API_WriteString (const char *str) {
+    API_WriteBuffer(str, strlen(str));
+}
+
+void API_WriteListStart () {
+    API_Write('(');
+}
+
+void API_WriteListEnd () {
+    API_Write(')');
+}
+
+void API_WriteArrayHead (size_t size) {
+    API_Write('X');
+    API_Write(size);    
+}
+
+/* read */
+char API_ReadByte() {
+    return fgetc(stdin);
+}
+
+short API_ReadShort() {
+    char buf[2];
+    fread(buf, 2, 1, stdin);
+
+    return ntohs(*((uint16_t *)buf));
+}
+
+/* char API_ReadCommand() {
+    char cmd = API_ReadByte();
+    char num_args = API_ReadByte();
+
+    return cmd;
+} */
+
+/* command hanlders */
+void API_CmdPlayers () {
+ 	Player *p;
+
+	NetworkPopulateCompanyInfo();
+    
+    API_WriteCommand(CMD_OUT_PLAYERS_REPLY, 1);
+    API_WriteListStart();
+
+	FOR_ALL_PLAYERS(p) {
+        const NetworkPlayerInfo *npi = &_network_player_info[p->index];
+		
+        if (!p->is_active) continue;
+
+        API_WriteArrayHead(13);
+
+        API_WriteByte(p->index + 1);                // Player ID
+        API_WriteByte(_player_colors[p->index]);    // Color ID
+        API_WriteString(npi->company_name);         // Company Name
+        API_WriteShort(p->inaugurated_year);        // Year Founded
+        API_WriteLong(p->player_money);             // Money
+        API_WriteLong(p->current_loan);             // Loan
+        API_WriteLong(CalculateCompanyValue(p));    // Company Value
+        API_WriteShort(npi->num_vehicle[0]);        // Trains
+        API_WriteShort(npi->num_vehicle[1]);        // Lorry
+        API_WriteShort(npi->num_vehicle[2]);        // Bus
+        API_WriteShort(npi->num_vehicle[3]);        // Planes
+        API_WriteShort(npi->num_vehicle[4]);        // Ships
+        API_WriteBoolean(StrEmpty(npi->password));  // Protected
+	}
+
+    API_WriteListEnd();
+    API_WriteFlush();
+}
+
+char* API_ReadString () {
+    char type = API_ReadByte();
+    size_t size;
+
+    switch (type) {
+        case 'B' :
+            size = API_ReadByte();
+            break;
+
+        case 'H' :
+            size = API_ReadShort();
+            break;
+        
+        default :
+            assert(0);  // blaa
+    }
+    
+    char *buf = (char*)malloc(size);
+    fread(buf, size, 1, stdin);
+
+
+    return buf;
+}
+
+void API_ReadReady() {
+    char cmd = API_ReadByte();
+    char num_args = API_ReadByte();
+    char arg_type;
+    char *buf;
+
+    switch (cmd) {
+        case CMD_IN_CONSOLE_EXEC :
+            assert(num_args == 1);
+
+            arg_type = API_ReadByte();
+
+            assert(arg_type == 'S');
+
+            buf = API_ReadString();
+
+            IConsoleCmdExec(buf);
+
+            free(buf);
+
+            break;
+        case CMD_IN_PLAYERS :
+            assert(num_args == 0);
+
+            API_CmdPlayers();
+    };
+}
+
+/* commands */
+void API_ConsoleMessageCmd (const char *msg) {
+    API_WriteCommand(CMD_OUT_CONSOLE, 1);
+    API_WriteString(msg);
+
+    API_WriteFlush();
+}
+
+void API_ConsoleWarningCmd (const char *msg) {
+    API_WriteCommand(CMD_OUT_WARNING, 1);
+    API_WriteString(msg);
+
+    API_WriteFlush();
+}
+
+void API_ConsoleErrorCmd (const char *msg) {
+    API_WriteCommand(CMD_OUT_ERROR, 1);
+    API_WriteString(msg);
+
+    API_WriteFlush();
+}
+
+void API_ConsoleDebugCmd (const char *category, const char *msg) {
+    API_WriteCommand(CMD_OUT_DEBUG, 2);
+    API_WriteString(category);
+    API_WriteString(msg);
+
+    API_WriteFlush();
+}
+
+void API_NetworkEventCmd (int action, bool self_send, const char *name, const char *buf) {
+    API_WriteCommand(CMD_OUT_NETWORK_EVENT, 4);
+    API_WriteByte(action);
+    API_WriteBoolean(self_send);
+    API_WriteString(name);
+    API_WriteString(buf);
+
+    API_WriteFlush();
+}
+
Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 11515)
+++ src/openttd.cpp	(working copy)
@@ -44,6 +44,7 @@
 #include "airport.h"
 #include "aircraft.h"
 #include "console.h"
+#include "api.h"
 #include "screenshot.h"
 #include "network/network.h"
 #include "signs.h"
@@ -184,7 +185,8 @@
 		"  -i                  = Force to use the DOS palette\n"
 		"                          (use this if you see a lot of pink)\n"
 		"  -c config_file      = Use 'config_file' instead of 'openttd.cfg'\n"
-		"  -x                  = Do not automatically save to config file on exit\n",
+		"  -x                  = Do not automatically save to config file on exit\n"
+        "  -A                  = Use the binary control API instead of the console\n",
 		lastof(buf)
 	);
 
@@ -358,6 +360,7 @@
 	Year startyear = INVALID_YEAR;
 	uint generation_seed = GENERATE_NEW_SEED;
 	bool save_config = true;
+    _binary_api = false;
 #if defined(ENABLE_NETWORK)
 	bool dedicated = false;
 	bool network   = false;
@@ -379,7 +382,7 @@
 	 *   a letter means: it accepts that param (e.g.: -h)
 	 *   a ':' behind it means: it need a param (e.g.: -m<driver>)
 	 *   a '::' behind it means: it can optional have a param (e.g.: -d<debug>) */
-	optformat = "m:s:v:b:hD::n::eit:d::r:g::G:c:xl:"
+	optformat = "m:s:v:b:hD::n::eit:d::r:g::G:c:xl:A"
 #if !defined(__MORPHOS__) && !defined(__AMIGA__) && !defined(WIN32)
 		"f"
 #endif
@@ -418,6 +421,7 @@
 		case 'l':
 			debuglog_conn = mgo.opt;
 			break;
+        case 'A': _binary_api = true; break;
 #endif /* ENABLE_NETWORK */
 		case 'r': ParseResolution(resolution, mgo.opt); break;
 		case 't': startyear = atoi(mgo.opt); break;
Index: source.list
===================================================================
--- source.list	(revision 11515)
+++ source.list	(working copy)
@@ -1,5 +1,6 @@
 # Source Files
 airport.cpp
+api.cpp
 articulated_vehicles.cpp
 autoreplace_cmd.cpp
 aystar.cpp
@@ -100,6 +101,7 @@
 aircraft.h
 airport.h
 airport_movement.h
+api.h
 articulated_vehicles.h
 autoslope.h
 aystar.h
